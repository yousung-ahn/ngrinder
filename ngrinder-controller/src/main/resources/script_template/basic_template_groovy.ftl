import static net.grinder.script.Grinder.grinder
import static org.junit.Assert.*
import static org.hamcrest.Matchers.*
import net.grinder.script.GTest
import net.grinder.script.Grinder
import net.grinder.scriptengine.groovy.junit.GrinderRunner
import net.grinder.scriptengine.groovy.junit.annotation.BeforeProcess
import net.grinder.scriptengine.groovy.junit.annotation.BeforeThread
// import static net.grinder.util.GrinderUtils.* // You can use this if you're using nGrinder after 3.2.3
import org.junit.Before
import org.junit.BeforeClass
import org.junit.Test
import org.junit.runner.RunWith

import java.util.Date
import java.util.List
import java.util.ArrayList

import org.ngrinder.http.HTTPRequest
import org.ngrinder.http.HTTPRequestControl
import org.ngrinder.http.HTTPResponse
import org.ngrinder.http.CookieManager

import okhttp3.*

/**
 * A simple example using the HTTP plugin that shows the retrieval of a
 * single page via HTTP.
 *
 * This script is automatically generated by ngrinder.
 *
 * @author ${userName}
 */
@RunWith(GrinderRunner)
<#if options??>
	<#assign options = options?eval>
	<#assign method = options["method"]>
	<#assign headers = options["headers"]>
	<#if options["body"]??>
		<#assign body = options["body"]>
	<#else>
		<#assign params = options["params"]>
	</#if>
	<#assign cookies = options["cookies"]>
</#if>
class TestRunner {

	public static GTest test
	public static HTTPRequest request
	public static Headers headers = Headers.of()
<#if body??>
	public static String body = "${body?j_string?replace("$", "\\$")}"
<#else>
	public static Map<String, Object> params = [:]
</#if>
	public static List<Cookie> cookies = []

	@BeforeProcess
	public static void beforeProcess() {
		HTTPRequestControl.setConnectTimeout(6000)
		test = new GTest(1, "${name}")
		request = HTTPRequest.create()
	<#if headers?? && headers?size != 0>
		// Set header datas
		headers = Headers.of(
		<#list headers as header>
			"${header["name"]?j_string}", "${header["value"]?j_string?replace("$", "\\$")}",
		</#list>
		)
	</#if>
	<#if params?? && params?size != 0>
		// Set param datas
		params = [
		<#list params as param>
			"${param["name"]?j_string}": "${param["value"]?j_string?replace("$", "\\$")}",
		</#list>
		]
	</#if>
	<#if cookies?? && cookies?size != 0>
		// Set cookie datas
		cookies = [
		<#list cookies as cookie>
			new Cookie.Builder()
				.name("${cookie["name"]?j_string}")
				.value("${cookie["value"]?j_string?replace("$", "\\$")}")
				.domain("${cookie["domain"]?j_string}")
				.path("${cookie["path"]?j_string}")
				.build(),
		</#list>
		]
	</#if>
		grinder.logger.info("before process.");
	}

	@BeforeThread
	public void beforeThread() {
		test.record(this, "test")
		grinder.statistics.delayReports=true;
		grinder.logger.info("before thread.");
	}

	@Before
	public void before() {
		CookieManager.addCookies(cookies)
		grinder.logger.info("before. init headers and cookies");
	}

	@Test
	public void test(){
		HTTPResponse result = request.${method?default("GET")}("${url}", <#if body??>body.getBytes()<#else>params</#if>, <#if headers??>headers</#if>)

		if (result.statusCode == 301 || result.statusCode == 302) {
			grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", result.statusCode);
		} else {
			assertThat(result.statusCode, is(200));
		}
	}
}
